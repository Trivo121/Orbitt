{"ast":null,"code":"var _jsxFileName = \"D:\\\\Study\\\\Projects\\\\Booo\\\\frontend\\\\src\\\\components\\\\ThemeContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useContext, useEffect } from 'react';\nimport { Moon, Sun } from 'lucide-react';\n\n// Create the ThemeContext with more detailed initial state\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ThemeContext = /*#__PURE__*/createContext({\n  isDarkMode: false,\n  toggleTheme: () => {},\n  ThemeToggler: () => null\n});\n\n// Theme Provider Component\nexport const ThemeProvider = ({\n  children\n}) => {\n  _s();\n  const [isDarkMode, setIsDarkMode] = useState(false);\n\n  // Check system preference and local storage on initial load\n  useEffect(() => {\n    const savedTheme = localStorage.getItem('theme');\n    const prefersDarkMode = window.matchMedia('(prefers-color-scheme: dark)').matches;\n    if (savedTheme) {\n      setIsDarkMode(savedTheme === 'dark');\n    } else {\n      setIsDarkMode(prefersDarkMode);\n    }\n  }, []);\n\n  // Update theme when dark mode changes\n  useEffect(() => {\n    document.documentElement.classList.toggle('dark', isDarkMode);\n    localStorage.setItem('theme', isDarkMode ? 'dark' : 'light');\n\n    // Apply custom dark mode styling\n    if (isDarkMode) {\n      document.body.classList.add('bg-gray-900', 'text-white');\n    } else {\n      document.body.classList.remove('bg-gray-900', 'text-white');\n    }\n  }, [isDarkMode]);\n\n  // Theme Toggler Component\n  const ThemeToggler = () => {\n    const toggleTheme = () => {\n      setIsDarkMode(!isDarkMode);\n    };\n    return /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: toggleTheme,\n      className: \"fixed top-4 right-4 z-50 bg-gray-200 dark:bg-gray-800 p-2 rounded-full shadow-lg transition-all hover:scale-110\",\n      \"aria-label\": \"Toggle Theme\",\n      children: isDarkMode ? /*#__PURE__*/_jsxDEV(Sun, {\n        className: \"text-yellow-500 w-6 h-6\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(Moon, {\n        className: \"text-blue-600 w-6 h-6\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this);\n  };\n  const toggleTheme = () => {\n    setIsDarkMode(!isDarkMode);\n  };\n  return /*#__PURE__*/_jsxDEV(ThemeContext.Provider, {\n    value: {\n      isDarkMode,\n      toggleTheme,\n      ThemeToggler\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 5\n  }, this);\n};\n\n// Custom hook to use the theme context\n_s(ThemeProvider, \"jZSDCHM8qUYa7sOOCe+CR2toAGQ=\");\n_c = ThemeProvider;\nexport const useTheme = () => {\n  _s2();\n  return useContext(ThemeContext);\n};\n_s2(useTheme, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport default ThemeContext;\nvar _c;\n$RefreshReg$(_c, \"ThemeProvider\");","map":{"version":3,"names":["React","createContext","useState","useContext","useEffect","Moon","Sun","jsxDEV","_jsxDEV","ThemeContext","isDarkMode","toggleTheme","ThemeToggler","ThemeProvider","children","_s","setIsDarkMode","savedTheme","localStorage","getItem","prefersDarkMode","window","matchMedia","matches","document","documentElement","classList","toggle","setItem","body","add","remove","onClick","className","fileName","_jsxFileName","lineNumber","columnNumber","Provider","value","_c","useTheme","_s2","$RefreshReg$"],"sources":["D:/Study/Projects/Booo/frontend/src/components/ThemeContext.js"],"sourcesContent":["import React, { createContext, useState, useContext, useEffect } from 'react';\r\nimport { Moon, Sun } from 'lucide-react';\r\n\r\n// Create the ThemeContext with more detailed initial state\r\nconst ThemeContext = createContext({\r\n  isDarkMode: false,\r\n  toggleTheme: () => {},\r\n  ThemeToggler: () => null\r\n});\r\n\r\n// Theme Provider Component\r\nexport const ThemeProvider = ({ children }) => {\r\n  const [isDarkMode, setIsDarkMode] = useState(false);\r\n  \r\n  // Check system preference and local storage on initial load\r\n  useEffect(() => {\r\n    const savedTheme = localStorage.getItem('theme');\r\n    const prefersDarkMode = window.matchMedia('(prefers-color-scheme: dark)').matches;\r\n    \r\n    if (savedTheme) {\r\n      setIsDarkMode(savedTheme === 'dark');\r\n    } else {\r\n      setIsDarkMode(prefersDarkMode);\r\n    }\r\n  }, []);\r\n  \r\n  // Update theme when dark mode changes\r\n  useEffect(() => {\r\n    document.documentElement.classList.toggle('dark', isDarkMode);\r\n    localStorage.setItem('theme', isDarkMode ? 'dark' : 'light');\r\n    \r\n    // Apply custom dark mode styling\r\n    if (isDarkMode) {\r\n      document.body.classList.add('bg-gray-900', 'text-white');\r\n    } else {\r\n      document.body.classList.remove('bg-gray-900', 'text-white');\r\n    }\r\n  }, [isDarkMode]);\r\n  \r\n  // Theme Toggler Component\r\n  const ThemeToggler = () => {\r\n    const toggleTheme = () => {\r\n      setIsDarkMode(!isDarkMode);\r\n    };\r\n    \r\n    return (\r\n      <button \r\n        onClick={toggleTheme} \r\n        className=\"fixed top-4 right-4 z-50 bg-gray-200 dark:bg-gray-800 p-2 rounded-full shadow-lg transition-all hover:scale-110\"\r\n        aria-label=\"Toggle Theme\"\r\n      >\r\n        {isDarkMode ? (\r\n          <Sun className=\"text-yellow-500 w-6 h-6\" />\r\n        ) : (\r\n          <Moon className=\"text-blue-600 w-6 h-6\" />\r\n        )}\r\n      </button>\r\n    );\r\n  };\r\n  \r\n  const toggleTheme = () => {\r\n    setIsDarkMode(!isDarkMode);\r\n  };\r\n  \r\n  return (\r\n    <ThemeContext.Provider value={{ \r\n      isDarkMode, \r\n      toggleTheme,\r\n      ThemeToggler \r\n    }}>\r\n      {children}\r\n    </ThemeContext.Provider>\r\n  );\r\n};\r\n\r\n// Custom hook to use the theme context\r\nexport const useTheme = () => useContext(ThemeContext);\r\n\r\nexport default ThemeContext;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}