{"ast":null,"code":"var _jsxFileName = \"D:\\\\Study\\\\Projects\\\\Booo\\\\frontend\\\\src\\\\components\\\\ThemeContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useContext, useEffect } from 'react';\n\n// Create the ThemeContext\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ThemeContext = /*#__PURE__*/createContext({\n  isDarkMode: false,\n  toggleTheme: () => {},\n  systemPreference: 'light'\n});\n\n// Theme Provider Component\nexport const ThemeProvider = ({\n  children\n}) => {\n  _s();\n  const [isDarkMode, setIsDarkMode] = useState(false);\n  const [systemPreference, setSystemPreference] = useState('light');\n\n  // Check system preference and local storage on initial load\n  useEffect(() => {\n    // Check system preference\n    const prefersDarkMode = window.matchMedia('(prefers-color-scheme: dark)');\n    setSystemPreference(prefersDarkMode.matches ? 'dark' : 'light');\n\n    // Handle changes in system preference\n    const handleChange = e => {\n      setSystemPreference(e.matches ? 'dark' : 'light');\n    };\n    prefersDarkMode.addListener(handleChange);\n\n    // Check saved theme\n    const savedTheme = localStorage.getItem('theme');\n    if (savedTheme) {\n      setIsDarkMode(savedTheme === 'dark');\n    } else {\n      setIsDarkMode(prefersDarkMode.matches);\n    }\n\n    // Cleanup listener\n    return () => prefersDarkMode.removeListener(handleChange);\n  }, []);\n\n  // Update theme when dark mode changes\n  useEffect(() => {\n    document.documentElement.classList.toggle('dark', isDarkMode);\n    localStorage.setItem('theme', isDarkMode ? 'dark' : 'light');\n  }, [isDarkMode]);\n  const toggleTheme = () => {\n    setIsDarkMode(!isDarkMode);\n  };\n  return /*#__PURE__*/_jsxDEV(ThemeContext.Provider, {\n    value: {\n      isDarkMode,\n      toggleTheme,\n      systemPreference\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 5\n  }, this);\n};\n\n// Custom hook to use the theme context\n_s(ThemeProvider, \"PAN9oOxwaELXEK9PF9QaWCbv4ao=\");\n_c = ThemeProvider;\nexport const useTheme = () => {\n  _s2();\n  return useContext(ThemeContext);\n};\n_s2(useTheme, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport default ThemeContext;\nvar _c;\n$RefreshReg$(_c, \"ThemeProvider\");","map":{"version":3,"names":["React","createContext","useState","useContext","useEffect","jsxDEV","_jsxDEV","ThemeContext","isDarkMode","toggleTheme","systemPreference","ThemeProvider","children","_s","setIsDarkMode","setSystemPreference","prefersDarkMode","window","matchMedia","matches","handleChange","e","addListener","savedTheme","localStorage","getItem","removeListener","document","documentElement","classList","toggle","setItem","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useTheme","_s2","$RefreshReg$"],"sources":["D:/Study/Projects/Booo/frontend/src/components/ThemeContext.js"],"sourcesContent":["import React, { createContext, useState, useContext, useEffect } from 'react';\r\n\r\n// Create the ThemeContext\r\nconst ThemeContext = createContext({\r\n  isDarkMode: false,\r\n  toggleTheme: () => {},\r\n  systemPreference: 'light'\r\n});\r\n\r\n// Theme Provider Component\r\nexport const ThemeProvider = ({ children }) => {\r\n  const [isDarkMode, setIsDarkMode] = useState(false);\r\n  const [systemPreference, setSystemPreference] = useState('light');\r\n\r\n  // Check system preference and local storage on initial load\r\n  useEffect(() => {\r\n    // Check system preference\r\n    const prefersDarkMode = window.matchMedia('(prefers-color-scheme: dark)');\r\n    setSystemPreference(prefersDarkMode.matches ? 'dark' : 'light');\r\n\r\n    // Handle changes in system preference\r\n    const handleChange = (e) => {\r\n      setSystemPreference(e.matches ? 'dark' : 'light');\r\n    };\r\n    prefersDarkMode.addListener(handleChange);\r\n\r\n    // Check saved theme\r\n    const savedTheme = localStorage.getItem('theme');\r\n    if (savedTheme) {\r\n      setIsDarkMode(savedTheme === 'dark');\r\n    } else {\r\n      setIsDarkMode(prefersDarkMode.matches);\r\n    }\r\n\r\n    // Cleanup listener\r\n    return () => prefersDarkMode.removeListener(handleChange);\r\n  }, []);\r\n\r\n  // Update theme when dark mode changes\r\n  useEffect(() => {\r\n    document.documentElement.classList.toggle('dark', isDarkMode);\r\n    localStorage.setItem('theme', isDarkMode ? 'dark' : 'light');\r\n  }, [isDarkMode]);\r\n\r\n  const toggleTheme = () => {\r\n    setIsDarkMode(!isDarkMode);\r\n  };\r\n\r\n  return (\r\n    <ThemeContext.Provider value={{ \r\n      isDarkMode, \r\n      toggleTheme, \r\n      systemPreference \r\n    }}>\r\n      {children}\r\n    </ThemeContext.Provider>\r\n  );\r\n};\r\n\r\n// Custom hook to use the theme context\r\nexport const useTheme = () => useContext(ThemeContext);\r\n\r\nexport default ThemeContext;"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,EAAEC,UAAU,EAAEC,SAAS,QAAQ,OAAO;;AAE7E;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,YAAY,gBAAGN,aAAa,CAAC;EACjCO,UAAU,EAAE,KAAK;EACjBC,WAAW,EAAEA,CAAA,KAAM,CAAC,CAAC;EACrBC,gBAAgB,EAAE;AACpB,CAAC,CAAC;;AAEF;AACA,OAAO,MAAMC,aAAa,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC7C,MAAM,CAACL,UAAU,EAAEM,aAAa,CAAC,GAAGZ,QAAQ,CAAC,KAAK,CAAC;EACnD,MAAM,CAACQ,gBAAgB,EAAEK,mBAAmB,CAAC,GAAGb,QAAQ,CAAC,OAAO,CAAC;;EAEjE;EACAE,SAAS,CAAC,MAAM;IACd;IACA,MAAMY,eAAe,GAAGC,MAAM,CAACC,UAAU,CAAC,8BAA8B,CAAC;IACzEH,mBAAmB,CAACC,eAAe,CAACG,OAAO,GAAG,MAAM,GAAG,OAAO,CAAC;;IAE/D;IACA,MAAMC,YAAY,GAAIC,CAAC,IAAK;MAC1BN,mBAAmB,CAACM,CAAC,CAACF,OAAO,GAAG,MAAM,GAAG,OAAO,CAAC;IACnD,CAAC;IACDH,eAAe,CAACM,WAAW,CAACF,YAAY,CAAC;;IAEzC;IACA,MAAMG,UAAU,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IAChD,IAAIF,UAAU,EAAE;MACdT,aAAa,CAACS,UAAU,KAAK,MAAM,CAAC;IACtC,CAAC,MAAM;MACLT,aAAa,CAACE,eAAe,CAACG,OAAO,CAAC;IACxC;;IAEA;IACA,OAAO,MAAMH,eAAe,CAACU,cAAc,CAACN,YAAY,CAAC;EAC3D,CAAC,EAAE,EAAE,CAAC;;EAEN;EACAhB,SAAS,CAAC,MAAM;IACduB,QAAQ,CAACC,eAAe,CAACC,SAAS,CAACC,MAAM,CAAC,MAAM,EAAEtB,UAAU,CAAC;IAC7DgB,YAAY,CAACO,OAAO,CAAC,OAAO,EAAEvB,UAAU,GAAG,MAAM,GAAG,OAAO,CAAC;EAC9D,CAAC,EAAE,CAACA,UAAU,CAAC,CAAC;EAEhB,MAAMC,WAAW,GAAGA,CAAA,KAAM;IACxBK,aAAa,CAAC,CAACN,UAAU,CAAC;EAC5B,CAAC;EAED,oBACEF,OAAA,CAACC,YAAY,CAACyB,QAAQ;IAACC,KAAK,EAAE;MAC5BzB,UAAU;MACVC,WAAW;MACXC;IACF,CAAE;IAAAE,QAAA,EACCA;EAAQ;IAAAsB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACY,CAAC;AAE5B,CAAC;;AAED;AAAAxB,EAAA,CAjDaF,aAAa;AAAA2B,EAAA,GAAb3B,aAAa;AAkD1B,OAAO,MAAM4B,QAAQ,GAAGA,CAAA;EAAAC,GAAA;EAAA,OAAMrC,UAAU,CAACI,YAAY,CAAC;AAAA;AAACiC,GAAA,CAA1CD,QAAQ;AAErB,eAAehC,YAAY;AAAC,IAAA+B,EAAA;AAAAG,YAAA,CAAAH,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}